import asyncio
from ai_handler import ai_generate_answer
import gradio as gr
from config import settings
from common import generate_filename, set_width_height
from sql_handler import Pg, ResultAnalyzer


async def upload_and_analyze(image, max_size: int = 1000):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—Å–∞–π–∑–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    :param max_size: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ
    :param image: –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :return: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤
    """
    yield "### üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    width, height = image.size
    resize, new_width, new_height = set_width_height(width, height, max_size)
    if resize:
        image = image.resize((new_width, new_height))

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = generate_filename(8) + '.jpg'
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG
    image.save(f"./images/{filename}", "JPEG")
    await asyncio.sleep(1)

    # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI
    yield "### ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."

    image_url = f'{settings.API_URL}/{filename}'
    image_description = await ai_generate_answer(image_url)
    if image_description:
        # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        await Pg.add_result(ResultAnalyzer(
            image_url=image_url,
            description=image_description
        ))

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        yield image_description + f'\n{image_url}'
    else:
        yield "### üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"


async def gradio_main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    with gr.Blocks() as iface:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        gr.Markdown("### –ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—é ü™Ñ‚ú®")

        # –í–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_input = gr.Image(type="pil", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        final_message_output = gr.Markdown("### –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç üí´")

        # –°–æ–µ–¥–∏–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
        image_input.change(fn=upload_and_analyze, inputs=image_input, outputs=final_message_output, show_progress='minimal')

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print('GRADIO STARTED!')
    iface.launch(max_file_size='10mb', server_name='0.0.0.0', server_port=7861)
